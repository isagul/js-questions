[{"questionDetail":"1. What's the output?","code":"function sayHi() {\n  console.log(name);\n  console.log(age);\n  var name = \"Lydia\";\n  let age = 21;\n}\n\nsayHi();","options":"\nA: Lydia and undefined\nB: Lydia and ReferenceError\nC: ReferenceError and 21\nD: undefined and ReferenceError\n","answer":"Answer: D","solution":"Within the function, we first declare the name variable with the var keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of undefined, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the name variable, so it still holds the value of undefined.Variables with the let keyword (and const) are hoisted, but unlike var, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a ReferenceError."},{"questionDetail":"2. What's the output?","code":"for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}","options":"\nA: 0 1 2 and 0 1 2\nB: 0 1 2 and 3 3 3\nC: 3 3 3 and 0 1 2\n","answer":"Answer: C","solution":"Because of the event queue in JavaScript, the setTimeout callback function is called after the loop has been executed. Since the variable i in the first loop was declared using the var keyword, this value was global. During the loop, we incremented the value of i by 1 each time, using the unary operator ++. By the time the setTimeout callback function was invoked, i was equal to 3 in the first example.In the second loop, the variable i was declared using the let keyword: variables declared with the let (and const) keyword are block-scoped (a block is anything between { }). During each iteration, i will have a new value, and each value is scoped inside the loop."},{"questionDetail":"3. What's the output?","code":"const shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius\n};\n\nconsole.log(shape.diameter());\nconsole.log(shape.perimeter());","options":"\nA: 20 and 62.83185307179586\nB: 20 and NaN\nC: 20 and 63\nD: NaN and 63\n","answer":"Answer: B","solution":"Note that the value of diameter is a regular function, whereas the value of perimeter is an arrow function.With arrow functions, the this keyword refers to its current surrounding scope, unlike regular functions! This means that when we call perimeter, it doesn't refer to the shape object, but to its surrounding scope (window for example).There is no value radius on that object, which returns undefined."},{"questionDetail":"4. What's the output?","code":"+true;\n!\"Lydia\";","options":"\nA: 1 and false\nB: false and NaN\nC: false and false\n","answer":"Answer: A","solution":"The unary plus tries to convert an operand to a number. true is 1, and false is 0.The string 'Lydia' is a truthy value. What we're actually asking, is \"is this truthy value falsy?\". This returns false."},{"questionDetail":"5. Which one is true?","code":"const bird = {\n  size: \"small\"\n};\n\nconst mouse = {\n  name: \"Mickey\",\n  small: true\n};","options":"\nA: mouse.bird.size is not valid\nB: mouse[bird.size] is not valid\nC: mouse[bird[\"size\"]] is not valid\nD: All of them are valid\n","answer":"Answer: A","solution":"In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not type them as strings, they are always converted into strings under the hood.JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket [ and keeps going until it finds the closing bracket ]. Only then, it will evaluate the statement.mouse[bird.size]: First it evaluates bird.size, which is \"small\". mouse[\"small\"] returns trueHowever, with dot notation, this doesn't happen. mouse does not have a key called bird, which means that mouse.bird is undefined. Then, we ask for the size using dot notation: mouse.bird.size. Since mouse.bird is undefined, we're actually asking undefined.size. This isn't valid, and will throw an error similar to Cannot read property \"size\" of undefined."},{"questionDetail":"6. What's the output?","code":"let c = { greeting: \"Hey!\" };\nlet d;\n\nd = c;\nc.greeting = \"Hello\";\nconsole.log(d.greeting);","options":"\nA: Hello\nB: Hey!\nC: undefined\nD: ReferenceError\nE: TypeError\n","answer":"Answer: A","solution":"In JavaScript, all objects interact by reference when setting them equal to each other.First, variable c holds a value to an object. Later, we assign d with the same reference that c has to the object.When you change one object, you change all of them."},{"questionDetail":"7. What's the output?","code":"let a = 3;\nlet b = new Number(3);\nlet c = 3;\n\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);","options":"\nA: true false true\nB: false false true\nC: true false false\nD: false true true\n","answer":"Answer: C","solution":"new Number() is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.When we use the == operator, it only checks whether it has the same value. They both have the value of 3, so it returns true.However, when we use the === operator, both value and type should be the same. It's not: new Number() is not a number, it's an object. Both return false."},{"questionDetail":"8. What's the output?","code":"class Chameleon {\n  static colorChange(newColor) {\n    this.newColor = newColor;\n    return this.newColor;\n  }\n\n  constructor({ newColor = \"green\" } = {}) {\n    this.newColor = newColor;\n  }\n}\n\nconst freddie = new Chameleon({ newColor: \"purple\" });\nconsole.log(freddie.colorChange(\"orange\"));","options":"\nA: orange\nB: purple\nC: green\nD: TypeError\n","answer":"Answer: D","solution":"The colorChange function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children. Since freddie is a child, the function is not passed down, and not available on the freddie instance: a TypeError is thrown."},{"questionDetail":"9. What's the output?","code":"let greeting;\ngreetign = {}; // Typo!\nconsole.log(greetign);","options":"\nA: {}\nB: ReferenceError: greetign is not defined\nC: undefined\n","answer":"Answer: A","solution":"It logs the object, because we just created an empty object on the global object! When we mistyped greeting as greetign, the JS interpreter actually saw this as global.greetign = {} (or window.greetign = {} in a browser).In order to avoid this, we can use \"use strict\". This makes sure that you have declared a variable before setting it equal to anything."},{"questionDetail":"10. What happens when we do this?","code":"function bark() {\n  console.log(\"Woof!\");\n}\n\nbark.animal = \"dog\";","options":"\nA: Nothing, this is totally fine!\nB: SyntaxError. You cannot add properties to a function this way.\nC: \"Woof\" gets logged.\nD: ReferenceError\n","answer":"Answer: A","solution":"This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable."},{"questionDetail":"11. What's the output?","code":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst member = new Person(\"Lydia\", \"Hallie\");\nPerson.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};\n\nconsole.log(member.getFullName());","options":"\nA: TypeError\nB: SyntaxError\nC: Lydia Hallie\nD: undefined undefined\n","answer":"Answer: A","solution":"You can't add properties to a constructor like you can with regular objects. If you want to add a feature to all objects at once, you have to use the prototype instead. So in this case,Person.prototype.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};would have made member.getFullName() work. Why is this beneficial? Say that we added this method to the constructor itself. Maybe not every Person instance needed this method. This would waste a lot of memory space, since they would still have that property, which takes of memory space for each instance. Instead, if we only add it to the prototype, we just have it at one spot in memory, yet they all have access to it!"},{"questionDetail":"12. What's the output?","code":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst lydia = new Person(\"Lydia\", \"Hallie\");\nconst sarah = Person(\"Sarah\", \"Smith\");\n\nconsole.log(lydia);\nconsole.log(sarah);","options":"\nA: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and undefined\nB: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and Person {firstName: \"Sarah\", lastName: \"Smith\"}\nC: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and {}\nD:Person {firstName: \"Lydia\", lastName: \"Hallie\"} and ReferenceError\n","answer":"Answer: A","solution":"For sarah, we didn't use the new keyword. When using new, it refers to the new empty object we create. However, if you don't add new it refers to the global object!We said that this.firstName equals \"Sarah\" and this.lastName equals \"Smith\". What we actually did, is defining global.firstName = 'Sarah' and global.lastName = 'Smith'. sarah itself is left undefined, since we don't return a value from the Person function."},{"questionDetail":"13. What are the three phases of event propagation?","code":null,"options":"\nA: Target > Capturing > Bubbling\nB: Bubbling > Target > Capturing\nC: Target > Bubbling > Capturing\nD: Capturing > Target > Bubbling\n","answer":"Answer: D","solution":"During the capturing phase, the event goes through the ancestor elements down to the target element. It then reaches the target element, and bubbling begins."},{"questionDetail":"14. All object have prototypes.","code":null,"options":"\nA: true\nB: false\n","answer":"Answer: B","solution":"All objects have prototypes, except for the base object. The base object is the object created by the user, or an object that is created using the new keyword. The base object has access to some methods and properties, such as .toString. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you."},{"questionDetail":"15. What's the output?","code":"function sum(a, b) {\n  return a + b;\n}\n\nsum(1, \"2\");","options":"\nA: NaN\nB: TypeError\nC: \"12\"\nD: 3\n","answer":"Answer: C","solution":"JavaScript is a dynamically typed language: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called implicit type coercion. Coercion is converting from one type into another.In this example, JavaScript converts the number 1 into a string, in order for the function to make sense and return a value. During the addition of a numeric type (1) and a string type ('2'), the number is treated as a string. We can concatenate strings like \"Hello\" + \"World\", so what's happening here is \"1\" + \"2\" which returns \"12\"."},{"questionDetail":"16. What's the output?","code":"let number = 0;\nconsole.log(number++);\nconsole.log(++number);\nconsole.log(number);","options":"\nA: 1 1 2\nB: 1 2 2\nC: 0 2 2\nD: 0 1 2\n","answer":"Answer: C","solution":"The postfix unary operator ++:\nReturns the value (this returns 0)\nIncrements the value (number is now 1)\nThe prefix unary operator ++:\nIncrements the value (number is now 2)\nReturns the value (this returns 2)\nThis returns 0 2 2."},{"questionDetail":"17. What's the output?","code":"function getPersonInfo(one, two, three) {\n  console.log(one);\n  console.log(two);\n  console.log(three);\n}\n\nconst person = \"Lydia\";\nconst age = 21;\n\ngetPersonInfo`${person} is ${age} years old`;","options":"\nA: \"Lydia\" 21 [\"\", \" is \", \" years old\"]\nB: [\"\", \" is \", \" years old\"] \"Lydia\" 21\nC: \"Lydia\" [\"\", \" is \", \" years old\"] 21\n","answer":"Answer: B","solution":"If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!"},{"questionDetail":"18. What's the output?","code":"function checkAge(data) {\n  if (data === { age: 18 }) {\n    console.log(\"You are an adult!\");\n  } else if (data == { age: 18 }) {\n    console.log(\"You are still an adult.\");\n  } else {\n    console.log(`Hmm.. You don't have an age I guess`);\n  }\n}\n\ncheckAge({ age: 18 });","options":"\nA: You are an adult!\nB: You are still an adult.\nC: Hmm.. You don't have an age I guess\n","answer":"Answer: C","solution":"When testing equality, primitives are compared by their value, while objects are compared by their reference. JavaScript checks if the objects have a reference to the same location in memory.The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.This is why both { age: 18 } === { age: 18 } and { age: 18 } == { age: 18 } return false."},{"questionDetail":"19. What's the output?","code":"function getAge(...args) {\n  console.log(typeof args);\n}\n\ngetAge(21);","options":"\nA: \"number\"\nB: \"array\"\nC: \"object\"\nD: \"NaN\"\n","answer":"Answer: C","solution":"The rest parameter (...args.) lets us \"collect\" all remaining arguments into an array. An array is an object, so typeof args returns \"object\""},{"questionDetail":"20. What's the output?","code":"function getAge() {\n  \"use strict\";\n  age = 21;\n  console.log(age);\n}\n\ngetAge();","options":"\nA: 21\nB: undefined\nC: ReferenceError\nD: TypeError\n","answer":"Answer: C","solution":"With \"use strict\", you can make sure that you don't accidentally declare global variables. We never declared the variable age, and since we use \"use strict\", it will throw a reference error. If we didn't use \"use strict\", it would have worked, since the property age would have gotten added to the global object."},{"questionDetail":"21. What's value of sum?","code":"const sum = eval(\"10*10+5\");","options":"\nA: 105\nB: \"105\"\nC: TypeError\nD: \"10*10+5\"\n","answer":"Answer: A","solution":"eval evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is 10 * 10 + 5. This returns the number 105."},{"questionDetail":"22. How long is cool_secret accessible?","code":"sessionStorage.setItem(\"cool_secret\", 123);","options":"\nA: Forever, the data doesn't get lost.\nB: When the user closes the tab.\nC: When the user closes the entire browser, not only the tab.\nD: When the user shuts off their computer.\n","answer":"Answer: B","solution":"The data stored in sessionStorage is removed after closing the tab.If you used localStorage, the data would've been there forever, unless for example localStorage.clear() is invoked."},{"questionDetail":"23. What's the output?","code":"var num = 8;\nvar num = 10;\n\nconsole.log(num);","options":"\nA: 8\nB: 10\nC: SyntaxError\nD: ReferenceError\n","answer":"Answer: B","solution":"With the var keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.You cannot do this with let or const since they're block-scoped."},{"questionDetail":"24. What's the output?","code":"const obj = { 1: \"a\", 2: \"b\", 3: \"c\" };\nconst set = new Set([1, 2, 3, 4, 5]);\n\nobj.hasOwnProperty(\"1\");\nobj.hasOwnProperty(1);\nset.has(\"1\");\nset.has(1);","options":"\nA: false true false true\nB: false true true true\nC: true true false true\nD: true true true true\n","answer":"Answer: C","solution":"All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why obj.hasOwnProperty('1') also returns true.It doesn't work that way for a set. There is no '1' in our set: set.has('1') returns false. It has the numeric type 1, set.has(1) returns true."},{"questionDetail":"25. What's the output?","code":"const obj = { a: \"one\", b: \"two\", a: \"three\" };\nconsole.log(obj);","options":"\nA: { a: \"one\", b: \"two\" }\nB: { b: \"two\", a: \"three\" }\nC: { a: \"three\", b: \"two\" }\nD: SyntaxError\n","answer":"Answer: C","solution":"If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value."},{"questionDetail":"26. The JavaScript global execution context creates two things for you: the global object, and the \"this\" keyword.","code":null,"options":"\nA: true\nB: false\nC: it depends\n","answer":"Answer: A","solution":"The base execution context is the global execution context: it's what's accessible everywhere in your code."},{"questionDetail":"27. What's the output?","code":"for (let i = 1; i < 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}","options":"\nA: 1 2\nB: 1 2 3\nC: 1 2 4\nD: 1 3 4\n","answer":"Answer: C","solution":"The continue statement skips an iteration if a certain condition returns true."},{"questionDetail":"28. What's the output?","code":"String.prototype.giveLydiaPizza = () => {\n  return \"Just give Lydia pizza already!\";\n};\n\nconst name = \"Lydia\";\n\nname.giveLydiaPizza();","options":"\nA: \"Just give Lydia pizza already!\"\nB: TypeError: not a function\nC: SyntaxError\nD: undefined\n","answer":"Answer: A","solution":"String is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!"},{"questionDetail":"29. What's the output?","code":"const a = {};\nconst b = { key: \"b\" };\nconst c = { key: \"c\" };\n\na[b] = 123;\na[c] = 456;\n\nconsole.log(a[b]);","options":"\nA: 123\nB: 456\nC: undefined\nD: ReferenceError\n","answer":"Answer: B","solution":"Object keys are automatically converted into strings. We are trying to set an object as a key to object a, with the value of 123.However, when we stringify an object, it becomes \"[object Object]\". So what we are saying here, is that a[\"object Object\"] = 123. Then, we can try to do the same again. c is another object that we are implicitly stringifying. So then, a[\"object Object\"] = 456.Then, we log a[b], which is actually a[\"object Object\"]. We just set that to 456, so it returns 456."},{"questionDetail":"30. What's the output?","code":"const foo = () => console.log(\"First\");\nconst bar = () => setTimeout(() => console.log(\"Second\"));\nconst baz = () => console.log(\"Third\");\n\nbar();\nfoo();\nbaz();","options":"\nA: First Second Third\nB: First Third Second\nC: Second First Third\nD: Second Third First\n","answer":"Answer: B","solution":"We have a setTimeout function and invoked it first. Yet, it was logged last.This is because in browsers, we don't just have the runtime engine, we also have something called a WebAPI. The WebAPI gives us the setTimeout function to start with, and for example the DOM.After the callback is pushed to the WebAPI, the setTimeout function itself (but not the callback!) is popped off the stack.Now, foo gets invoked, and \"First\" is being logged.foo is popped off the stack, and baz gets invoked. \"Third\" gets logged.The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the queue.This is where an event loop starts to work. An event loop looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.bar gets invoked, \"Second\" gets logged, and it's popped off the stack."},{"questionDetail":"31. What is the event.target when clicking the button?","code":"<div onclick=\"console.log('first div')\">\n  <div onclick=\"console.log('second div')\">\n    <button onclick=\"console.log('button')\">\n      Click!\n    </button>\n  </div>\n</div>","options":"\nA: Outer div\nB: Inner div\nC: button\nD: An array of all nested elements.\n","answer":"Answer: C","solution":"The deepest nested element that caused the event is the target of the event. You can stop bubbling by event.stopPropagation"},{"questionDetail":"32. When you click the paragraph, what's the logged output?","code":"<div onclick=\"console.log('div')\">\n  <p onclick=\"console.log('p')\">\n    Click here!\n  </p>\n</div>","options":"\nA: p div\nB: div p\nC: p\nD: div\n","answer":"Answer: A","solution":"If we click p, we see two logs: p and div. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set useCapture to true). It goes from the deepest nested element outwards."},{"questionDetail":"33. What's the output?","code":"const person = { name: \"Lydia\" };\n\nfunction sayHi(age) {\n  return `${this.name} is ${age}`;\n}\n\nconsole.log(sayHi.call(person, 21));\nconsole.log(sayHi.bind(person, 21));","options":"\nA: undefined is 21 Lydia is 21\nB: function function\nC: Lydia is 21 Lydia is 21\nD: Lydia is 21 function\n","answer":"Answer: D","solution":"With both, we can pass the object to which we want the this keyword to refer to. However, .call is also executed immediately!.bind. returns a copy of the function, but with a bound context! It is not executed immediately."},{"questionDetail":"34. What's the output?","code":"function sayHi() {\n  return (() => 0)();\n}\n\nconsole.log(typeof sayHi());","options":"\nA: \"object\"\nB: \"number\"\nC: \"function\"\nD: \"undefined\"\n","answer":"Answer: B","solution":"The sayHi function returns the returned value of the immediately invoked function (IIFE). This function returned 0, which is type \"number\".FYI: there are only 7 built-in types: null, undefined, boolean, number, string, object, and symbol. \"function\" is not a type, since functions are objects, it's of type \"object\"."},{"questionDetail":"35. Which of these values are falsy?","code":"0;\nnew Number(0);\n(\"\");\n(\" \");\nnew Boolean(false);\nundefined;","options":"\nA: 0, '', undefined\nB: 0, new Number(0), '', new Boolean(false), undefined\nC: 0, '', new Boolean(false), undefined\nD: All of them are falsy\n","answer":"Answer: A","solution":"There are only six falsy values:\nundefined\nnull\nNaN\n0\n'' (empty string)\nfalse\nFunction constructors, like new Number and new Boolean are truthy."},{"questionDetail":"36. What's the output?","code":"console.log(typeof typeof 1);","options":"\nA: \"number\"\nB: \"string\"\nC: \"object\"\nD: \"undefined\"\n","answer":"Answer: B","solution":"typeof 1 returns \"number\".\ntypeof \"number\" returns \"string\""},{"questionDetail":"37. What's the output?","code":"const numbers = [1, 2, 3];\nnumbers[10] = 11;\nconsole.log(numbers);","options":"\nA: [1, 2, 3, 7 x null, 11]\nB: [1, 2, 3, 11]\nC: [1, 2, 3, 7 x empty, 11]\nD: SyntaxError\n","answer":"Answer: C","solution":"When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called \"empty slots\". These actually have the value of undefined, but you will see something like:[1, 2, 3, 7 x empty, 11]depending on where you run it (it's different for every browser, node, etc.)"},{"questionDetail":"38. What's the output?","code":"(() => {\n  let x, y;\n  try {\n    throw new Error();\n  } catch (x) {\n    (x = 1), (y = 2);\n    console.log(x);\n  }\n  console.log(x);\n  console.log(y);\n})();","options":"\nA: 1 undefined 2\nB: undefined undefined undefined\nC: 1 1 2\nD: 1 undefined undefined\n","answer":"Answer: A","solution":"The catch block receives the argument x. This is not the same x as the variable when we pass arguments. This variable x is block-scoped.Later, we set this block-scoped variable equal to 1, and set the value of the variable y. Now, we log the block-scoped variable x, which is equal to 1.Outside of the catch block, x is still undefined, and y is 2. When we want to console.log(x) outside of the catch block, it returns undefined, and y returns 2."},{"questionDetail":"39. Everything in JavaScript is either a...","code":null,"options":"\nA: primitive or object\nB: function or object\nC: trick question! only objects\nD: number or object\n","answer":"Answer: A","solution":"JavaScript only has primitive types and objects.Primitive types are boolean, null, undefined, bigint, number, string, and symbol.What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that 'foo'.toUpperCase() evaluates to 'FOO' and does not result in a TypeError. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the object using one of the wrapper classes, i.e. String, and then immediately discard the wrapper after the expression evaluates. All primitives except for null and undefined exhibit this behaviour."},{"questionDetail":"40. What's the output?","code":"[[0, 1], [2, 3]].reduce(\n  (acc, cur) => {\n    return acc.concat(cur);\n  },\n  [1, 2]\n);","options":"\nA: [0, 1, 2, 3, 1, 2]\nB: [6, 1, 2]\nC: [1, 2, 0, 1, 2, 3]\nD: [1, 2, 6]\n","answer":"Answer: C","solution":"[1, 2] is our initial value. This is the value we start with, and the value of the very first acc. During the first round, acc is [1,2], and cur is [0, 1]. We concatenate them, which results in [1, 2, 0, 1].Then, [1, 2, 0, 1] is acc and [2, 3] is cur. We concatenate them, and get [1, 2, 0, 1, 2, 3]"},{"questionDetail":"41. What's the output?","code":"!!null;\n!!\"\";\n!!1;","options":"\nA: false true false\nB: false false true\nC: false true true\nD: true true false\n","answer":"Answer: B","solution":"null is falsy. !null returns true. !true returns false.\"\" is falsy. !\"\" returns true. !true returns false.1 is truthy. !1 returns false. !false returns true."},{"questionDetail":"42. What does the setInterval method return in the browser?","code":"setInterval(() => console.log(\"Hi\"), 1000);","options":"\nA: a unique id\nB: the amount of milliseconds specified\nC: the passed function\nD: undefined\n","answer":"Answer: A","solution":"It returns a unique id. This id can be used to clear that interval with the clearInterval() function."},{"questionDetail":"43. What does this return?","code":"[...\"Lydia\"];","options":"\nA: [\"L\", \"y\", \"d\", \"i\", \"a\"]\nB: [\"Lydia\"]\nC: [[], \"Lydia\"]\nD: [[\"L\", \"y\", \"d\", \"i\", \"a\"]]\n","answer":"Answer: A","solution":"A string is an iterable. The spread operator maps every character of an iterable to one element."},{"questionDetail":"44. What's the output?","code":"function* generator(i) {\n  yield i;\n  yield i * 2;\n}\n\nconst gen = generator(10);\n\nconsole.log(gen.next().value);\nconsole.log(gen.next().value);","options":"\nA: [0, 10], [10, 20]\nB: 20, 20\nC: 10, 20\nD: 0, 10 and 10, 20\n","answer":"Answer: C","solution":"Regular functions cannot be stopped mid-way after invocation. However, a generator function can be \"stopped\" midway, and later continue from where it stopped. Every time a generator function encounters a yield keyword, the function yields the value specified after it. Note that the generator function in that case doesn’t return the value, it yields the value.First, we initialize the generator function with i equal to 10. We invoke the generator function using the next() method. The first time we invoke the generator function, i is equal to 10. It encounters the first yield keyword: it yields the value of i. The generator is now \"paused\", and 10 gets logged.Then, we invoke the function again with the next() method. It starts to continue where it stopped previously, still with i equal to 10. Now, it encounters the next yield keyword, and yields i * 2. i is equal to 10, so it returns 10 * 2, which is 20. This results in 10, 20."},{"questionDetail":"45. What does this return?","code":"const firstPromise = new Promise((res, rej) => {\n  setTimeout(res, 500, \"one\");\n});\n\nconst secondPromise = new Promise((res, rej) => {\n  setTimeout(res, 100, \"two\");\n});\n\nPromise.race([firstPromise, secondPromise]).then(res => console.log(res));","options":"\nA: \"one\"\nB: \"two\"\nC: \"two\" \"one\"\nD: \"one\" \"two\"\n","answer":"Answer: B","solution":"When we pass multiple promises to the Promise.race method, it resolves/rejects the first promise that resolves/rejects. To the setTimeout method, we pass a timer: 500ms for the first promise (firstPromise), and 100ms for the second promise (secondPromise). This means that the secondPromise resolves first with the value of 'two'. res now holds the value of 'two', which gets logged."},{"questionDetail":"46. What's the output?","code":"let person = { name: \"Lydia\" };\nconst members = [person];\nperson = null;\n\nconsole.log(members);","options":"\nA: null\nB: [null]\nC: [{}]\nD: [{ name: \"Lydia\" }]\n","answer":"Answer: D","solution":"First, we declare a variable person with the value of an object that has a name property.Then, we declare a variable called members. We set the first element of that array equal to the value of the person variable. Objects interact by reference when setting them equal to each other. When you assign a reference from one variable to another, you make a copy of that reference. (note that they don't have the same reference!)Then, we set the variable person equal to null.We are only modifying the value of the person variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in members still holds its reference to the original object. When we log the members array, the first element still holds the value of the object, which gets logged."},{"questionDetail":"47. What's the output?","code":"const person = {\n  name: \"Lydia\",\n  age: 21\n};\n\nfor (const item in person) {\n  console.log(item);\n}","options":"\nA: { name: \"Lydia\" }, { age: 21 }\nB: \"name\", \"age\"\nC: \"Lydia\", 21\nD: [\"name\", \"Lydia\"], [\"age\", 21]\n","answer":"Answer: B","solution":"With a for-in loop, we can iterate through object keys, in this case name and age. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of item equal to the current key it’s iterating over. First, item is equal to name, and gets logged. Then, item is equal to age, which gets logged."},{"questionDetail":"48. What's the output?","code":"console.log(3 + 4 + \"5\");","options":"\nA: \"345\"\nB: \"75\"\nC: 12\nD: \"12\"\n","answer":"Answer: B","solution":"Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the same precedence. We only have one type of operator: +. For addition, the associativity is left-to-right.3 + 4 gets evaluated first. This results in the number 7.7 + '5' results in \"75\" because of coercion. JavaScript converts the number 7 into a string, see question 15. We can concatenate two strings using the +operator. \"7\" + \"5\" results in \"75\"."},{"questionDetail":"49. What's the value of num?","code":"const num = parseInt(\"7*6\", 10);","options":"\nA: 42\nB: \"42\"\nC: 7\nD: NaN\n","answer":"Answer: C","solution":"Only the first numbers in the string is returned. Based on the radix (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the parseInt checks whether the characters in the string are valid. Once it encounters a character that isn't a valid number in the radix, it stops parsing and ignores the following characters.* is not a valid number. It only parses \"7\" into the decimal 7. num now holds the value of 7."},{"questionDetail":"50. What's the output`?","code":"[1, 2, 3].map(num => {\n  if (typeof num === \"number\") return;\n  return num * 2;\n});","options":"\nA: []\nB: [null, null, null]\nC: [undefined, undefined, undefined]\nD: [ 3 x empty ]\n","answer":"Answer: C","solution":"When mapping over the array, the value of num is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement typeof num === \"number\" returns true. The map function creates a new array and inserts the values returned from the function.However, we don’t return a value. When we don’t return a value from the function, the function returns undefined. For every element in the array, the function block gets called, so for each element we return undefined."},{"questionDetail":"51. What's the output?","code":"function getInfo(member, year) {\n  member.name = \"Lydia\";\n  year = \"1998\";\n}\n\nconst person = { name: \"Sarah\" };\nconst birthYear = \"1997\";\n\ngetInfo(person, birthYear);\n\nconsole.log(person, birthYear);","options":"\nA: { name: \"Lydia\" }, \"1997\"\nB: { name: \"Sarah\" }, \"1998\"\nC: { name: \"Lydia\" }, \"1998\"\nD: { name: \"Sarah\" }, \"1997\"\n","answer":"Answer: A","solution":"Arguments are passed by value, unless their value is an object, then they're passed by reference. birthYear is passed by value, since it's a string, not an object. When we pass arguments by value, a copy of that value is created (see question 46).The variable birthYear has a reference to the value \"1997\". The argument year also has a reference to the value \"1997\", but it's not the same value as birthYear has a reference to. When we update the value of year by setting year equal to \"1998\", we are only updating the value of year. birthYear is still equal to \"1997\".The value of person is an object. The argument member has a (copied) reference to the same object. When we modify a property of the object member has a reference to, the value of person will also be modified, since they both have a reference to the same object. person's name property is now equal to the value \"Lydia\""},{"questionDetail":"52. What's the output?","code":"function greeting() {\n  throw \"Hello world!\";\n}\n\nfunction sayHi() {\n  try {\n    const data = greeting();\n    console.log(\"It worked!\", data);\n  } catch (e) {\n    console.log(\"Oh no an error:\", e);\n  }\n}\n\nsayHi();","options":"\nA: It worked! Hello world!\nB: Oh no an error: undefined\nC: SyntaxError: can only throw Error objects\nD: Oh no an error: Hello world!\n","answer":"Answer: D","solution":"With the throw statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a string, a number, a boolean or an object. In this case, our exception is the string 'Hello world'.With the catch statement, we can specify what to do if an exception is thrown in the try block. An exception is thrown: the string 'Hello world'. e is now equal to that string, which we log. This results in 'Oh an error: Hello world'."},{"questionDetail":"53. What's the output?","code":"function Car() {\n  this.make = \"Lamborghini\";\n  return { make: \"Maserati\" };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);","options":"\nA: \"Lamborghini\"\nB: \"Maserati\"\nC: ReferenceError\nD: TypeError\n","answer":"Answer: B","solution":"When you return a property, the value of the property is equal to the returned value, not the value set in the constructor function. We return the string \"Maserati\", so myCar.make is equal to \"Maserati\"."},{"questionDetail":"54. What's the output?","code":"(() => {\n  let x = (y = 10);\n})();\n\nconsole.log(typeof x);\nconsole.log(typeof y);","options":"\nA: \"undefined\", \"number\"\nB: \"number\", \"number\"\nC: \"object\", \"number\"\nD: \"number\", \"undefined\"\n","answer":"Answer: A","solution":"let x = y = 10; is actually shorthand for:y = 10;\nlet x = y;When we set y equal to 10, we actually add a property y to the global object (window in browser, global in Node). In a browser, window.y is now equal to 10.Then, we declare a variable x with the value of y, which is 10. Variables declared with the let keyword are block scoped, they are only defined within the block they're declared in; the immediately-invoked function (IIFE) in this case. When we use the typeof operator, the operand x is not defined: we are trying to access x outside of the block it's declared in. This means that x is not defined. Values who haven't been assigned a value or declared are of type \"undefined\". console.log(typeof x) returns \"undefined\".However, we created a global variable y when setting y equal to 10. This value is accessible anywhere in our code. y is defined, and holds a value of type \"number\". console.log(typeof y) returns \"number\"."},{"questionDetail":"55. What's the output?","code":"class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nDog.prototype.bark = function() {\n  console.log(`Woof I am ${this.name}`);\n};\n\nconst pet = new Dog(\"Mara\");\n\npet.bark();\n\ndelete Dog.prototype.bark;\n\npet.bark();","options":"\nA: \"Woof I am Mara\", TypeError\nB: \"Woof I am Mara\", \"Woof I am Mara\"\nC: \"Woof I am Mara\", undefined\nD: TypeError, TypeError\n","answer":"Answer: A","solution":"We can delete properties from objects using the delete keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the bark function is not available anymore on the prototype after delete Dog.prototype.bark, yet we still try to access it.When we try to invoke something that is not a function, a TypeError is thrown. In this case TypeError: pet.bark is not a function, since pet.bark is undefined."},{"questionDetail":"56. What's the output?","code":"const set = new Set([1, 1, 2, 3, 4]);\n\nconsole.log(set);","options":"\nA: [1, 1, 2, 3, 4]\nB: [1, 2, 3, 4]\nC: {1, 1, 2, 3, 4}\nD: {1, 2, 3, 4}\n","answer":"Answer: D","solution":"The Set object is a collection of unique values: a value can only occur once in a set.We passed the iterable [1, 1, 2, 3, 4] with a duplicate value 1. Since we cannot have two of the same values in a set, one of them is removed. This results in {1, 2, 3, 4}."},{"questionDetail":"57. What's the output?","code":"// counter.js\nlet counter = 10;\nexport default counter;","options":"","answer":"","solution":""},{"questionDetail":"58. What's the output?","code":"const name = \"Lydia\";\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);","options":"\nA: false, true\nB: \"Lydia\", 21\nC: true, true\nD: undefined, undefined\n","answer":"Answer: A","solution":"The delete operator returns a boolean value: true on a successful deletion, else it'll return false. However, variables declared with the var, const or let keyword cannot be deleted using the delete operator.The name variable was declared with a const keyword, so its deletion is not successful: false is returned. When we set age equal to 21, we actually added a property called age to the global object. You can successfully delete properties from objects this way, also the global object, so delete age returns true."},{"questionDetail":"59. What's the output?","code":"const numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);","options":"\nA: [[1, 2, 3, 4, 5]]\nB: [1, 2, 3, 4, 5]\nC: 1\nD: [1]\n","answer":"Answer: C","solution":"We can unpack values from arrays or properties from objects through destructuring. For example:[a, b] = [1, 2];The value of a is now 1, and the value of b is now 2. What we actually did in the question, is:[y] = [1, 2, 3, 4, 5];This means that the value of y is equal to the first value in the array, which is the number 1. When we log y, 1 is returned."},{"questionDetail":"60. What's the output?","code":"const user = { name: \"Lydia\", age: 21 };\nconst admin = { admin: true, ...user };\n\nconsole.log(admin);","options":"\nA: { admin: true, user: { name: \"Lydia\", age: 21 } }\nB: { admin: true, name: \"Lydia\", age: 21 }\nC: { admin: true, user: [\"Lydia\", 21] }\nD: { admin: true }\n","answer":"Answer: B","solution":"It's possible to combine objects using the spread operator .... It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the user object, and add them to the admin object. The admin object now contains the copied key/value pairs, which results in { admin: true, name: \"Lydia\", age: 21 }."},{"questionDetail":"61. What's the output?","code":"const person = { name: \"Lydia\" };\n\nObject.defineProperty(person, \"age\", { value: 21 });\n\nconsole.log(person);\nconsole.log(Object.keys(person));","options":"\nA: { name: \"Lydia\", age: 21 }, [\"name\", \"age\"]\nB: { name: \"Lydia\", age: 21 }, [\"name\"]\nC: { name: \"Lydia\"}, [\"name\", \"age\"]\nD: { name: \"Lydia\"}, [\"age\"]\n","answer":"Answer: B","solution":"With the defineProperty method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the defineProperty method, they are by default not enumerable. The Object.keys method returns all enumerable property names from an object, in this case only \"name\".Properties added using the defineProperty method are immutable by default. You can override this behavior using the writable, configurable and enumerable properties. This way, the defineProperty method gives you a lot more control over the properties you're adding to an object."},{"questionDetail":"62. What's the output?","code":"const settings = {\n  username: \"lydiahallie\",\n  level: 19,\n  health: 90\n};\n\nconst data = JSON.stringify(settings, [\"level\", \"health\"]);\nconsole.log(data);","options":"\nA: \"{\"level\":19, \"health\":90}\"\nB: \"{\"username\": \"lydiahallie\"}\"\nC: \"[\"level\", \"health\"]\"\nD: \"{\"username\": \"lydiahallie\", \"level\":19, \"health\":90}\"\n","answer":"Answer: A","solution":"The second argument of JSON.stringify is the replacer. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.If the replacer is an array, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names \"level\" and \"health\" are included, \"username\" is excluded. data is now equal to \"{\"level\":19, \"health\":90}\".If the replacer is a function, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is undefined, this property is excluded from the JSON string."},{"questionDetail":"63. What's the output?","code":"let num = 10;\n\nconst increaseNumber = () => num++;\nconst increasePassedNumber = number => number++;\n\nconst num1 = increaseNumber();\nconst num2 = increasePassedNumber(num1);\n\nconsole.log(num1);\nconsole.log(num2);","options":"\nA: 10, 10\nB: 10, 11\nC: 11, 11\nD: 11, 12\n","answer":"Answer: A","solution":"The unary operator ++ first returns the value of the operand, then increments the value of the operand. The value of num1 is 10, since the increaseNumber function first returns the value of num, which is 10, and only increments the value of num afterwards.num2 is 10, since we passed num1 to the increasePassedNumber. number is equal to 10(the value of num1. Again, the unary operator ++ first returns the value of the operand, then increments the value of the operand. The value of number is 10, so num2 is equal to 10."},{"questionDetail":"64. What's the output?","code":"const value = { number: 10 };\n\nconst multiply = (x = { ...value }) => {\n  console.log((x.number *= 2));\n};\n\nmultiply();\nmultiply();\nmultiply(value);\nmultiply(value);","options":"\nA: 20, 40, 80, 160\nB: 20, 40, 20, 40\nC: 20, 20, 20, 40\nD: NaN, NaN, 20, 40\n","answer":"Answer: C","solution":"In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is \"undefined\". In this case, we spread the properties of the value object into a new object, so x has the default value of { number: 10 }.The default argument is evaluated at call time! Every time we call the function, a new object is created. We invoke the multiply function the first two times without passing a value: x has the default value of { number: 10 }. We then log the multiplied value of that number, which is 20.The third time we invoke multiply, we do pass an argument: the object called value. The *= operator is actually shorthand for x.number = x.number * 2: we modify the value of x.number, and log the multiplied value 20.The fourth time, we pass the value object again. x.number was previously modified to 20, so x.number *= 2 logs 40."},{"questionDetail":"65. What's the output?","code":"[1, 2, 3, 4].reduce((x, y) => console.log(x, y));","options":"\nA: 1 2 and 3 3 and 6 4\nB: 1 2 and 2 3 and 3 4\nC: 1 undefined and 2 undefined and 3 undefined and 4 undefined\nD: 1 2 and undefined 3 and undefined 4\n","answer":"Answer: D","solution":"The first argument that the reduce method receives is the accumulator, x in this case. The second argument is the current value, y. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional initialValue argument to the reduce method, the accumulator is equal to the first element on the first call.On the first call, the accumulator (x) is 1, and the current value (y) is 2. We don't return from the callback function, we log the accumulator and current value: 1 and 2 get logged.If you don't return a value from a function, it returns undefined. On the next call, the accumulator is undefined, and the current value is 3. undefined and 3 get logged.On the fourth call, we again don't return from the callback function. The accumulator is again undefined, and the current value is 4. undefined and 4 get logged."},{"questionDetail":"66. With which constructor can we successfully extend the Dog class?","code":"class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n};\n\nclass Labrador extends Dog {\n  // 1 \n  constructor(name, size) {\n    this.size = size;\n  }\n  // 2\n  constructor(name, size) {\n    super(name);\n    this.size = size;\n  }\n  // 3\n  constructor(size) {\n    super(name);\n    this.size = size;\n  }\n  // 4 \n  constructor(name, size) {\n    this.name = name;\n    this.size = size;\n  }\n\n};","options":"\nA: 1\nB: 2\nC: 3\nD: 4\n","answer":"Answer: B","solution":"In a derived class, you cannot access the this keyword before calling super. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.With the super keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the name argument, so we need to pass name to super.The Labrador class receives two arguments, name since it extends Dog, and size as an extra property on the Labrador class. They both need to be passed to the constructor function on Labrador, which is done correctly  using constructor 2."},{"questionDetail":"67. What's the output?","code":"// index.js\nconsole.log('running index.js');\nimport { sum } from './sum.js';\nconsole.log(sum(1, 2));\n\n// sum.js\nconsole.log('running sum.js');\nexport const sum = (a, b) => a + b;","options":"\nA: running index.js, running sum.js, 3\nB: running sum.js, running index.js, 3\nC: running sum.js, 3, running index.js\nD: running index.js, undefined, running sum.js\n","answer":"Answer: B","solution":"With the import keyword, all imported modules are pre-parsed. This means that the imported modules get run first, the code in the file which imports the module gets executed after.This is a difference between require() in CommonJS and import! With require(), you can load dependencies on demand while the code is being run. If we would have used require instead of import, running index.js, running sum.js, 3 would have been logged to the console."},{"questionDetail":"68. What's the output?","code":"console.log(Number(2) === Number(2))\nconsole.log(Boolean(false) === Boolean(false))\nconsole.log(Symbol('foo') === Symbol('foo'))","options":"\nA: true, true, false\nB: false, true, false\nC: true, false, true\nD: true, true, true\n","answer":"Answer: A","solution":"Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first Symbol('foo'), and the second Symbol('foo'). These two values are unique and not equal to each other, Symbol('foo') === Symbol('foo') returns false."},{"questionDetail":"69. What's the output?","code":"const name = \"Lydia Hallie\"\nconsole.log(name.padStart(13))\nconsole.log(name.padStart(2))","options":"\nA: \"Lydia Hallie\", \"Lydia Hallie\"\nB: \"           Lydia Hallie\", \"  Lydia Hallie\" (\"[13x whitespace]Lydia Hallie\", \"[2x whitespace]Lydia Hallie\")\nC: \" Lydia Hallie\", \"Lydia Hallie\" (\"[1x whitespace]Lydia Hallie\", \"Lydia Hallie\")\nD: \"Lydia Hallie\", \"Lyd\",\n","answer":"Answer: C","solution":"With the padStart method, we can add padding to the beginning of a string. The value passed to this method is the total length of the string together with the padding. The string \"Lydia Hallie\" has a length of 12. name.padStart(13) inserts 1 space at the start of the string, because 12 + 1 is 13.If the argument passed to the padStart method is smaller than the length of the array, no padding will be added."},{"questionDetail":"70. What's the output?","code":"console.log(\"🥑\" + \"💻\");","options":"\nA: \"🥑💻\"\nB: 257548\nC: A string containing their code points\nD: Error\n","answer":"Answer: A","solution":"With the + operator, you can concatenate strings. In this case, we are concatenating the string \"🥑\" with the string \"💻\", resulting in \"🥑💻\"."},{"questionDetail":"71. How can we log the values that are commented out after the console.log statement?","code":"function* startGame() {\n  const answer = yield \"Do you love JavaScript?\";\n  if (answer !== \"Yes\") {\n    return \"Oh wow... Guess we're gone here\";\n  }\n  return \"JavaScript loves you back ❤️\";\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back ❤️","options":"\nA: game.next(\"Yes\").value and game.next().value\nB: game.next.value(\"Yes\") and game.next.value()\nC: game.next().value and game.next(\"Yes\").value\nD: game.next.value() and game.next.value(\"Yes\")\n","answer":"Answer: C","solution":"A generator function \"pauses\" its execution when it sees the yield keyword. First, we have to let the function yield the string \"Do you love JavaScript?\", which can be done by calling game.next().value.Every line is executed, until it finds the first yield keyword. There is a yield keyword on the first line within the function: the execution stops with the first yield! This means that the variable answer is not defined yet!When we call game.next(\"Yes\").value, the previous yield is replaced with the value of the parameters passed to the next() function, \"Yes\" in this case. The value of the variable answer is now equal to \"Yes\". The condition of the if-statement returns false, and JavaScript loves you back ❤️ gets logged."},{"questionDetail":"72. What's the output?","code":"console.log(String.raw`Hello\\nworld`);","options":"\nA: Hello world!\nB: Hello      world\nC: Hello\\nworld\nD: Hello\\n       world\n","answer":"Answer: C","solution":"String.raw returns a string where the escapes (\\n, \\v, \\t etc.) are ignored! Backslashes can be an issue since you could end up with something like:const path = `C:\\Documents\\Projects\\table.html`Which would result in:\"C:DocumentsProjects able.html\"With String.raw, it would simply ignore the escape and print:C:\\Documents\\Projects\\table.htmlIn this case, the string is Hello\\nworld, which gets logged."},{"questionDetail":"73. What's the output?","code":"async function getData() {\n  return await Promise.resolve(\"I made it!\");\n}\n\nconst data = getData();\nconsole.log(data);","options":"\nA: \"I made it!\"\nB: Promise {<resolved>: \"I made it!\"}\nC: Promise {<pending>}\nD: undefined\n","answer":"Answer: C","solution":"An async function always returns a promise. The await still has to wait for the promise to resolve: a pending promise gets returned when we call getData() in order to set data equal to it.If we wanted to get access to the resolved value \"I made it\", we could have used the .then() method on data:data.then(res => console.log(res))This would've logged \"I made it!\""},{"questionDetail":"74. What's the output?","code":"function addToList(item, list) {\n  return list.push(item);\n}\n\nconst result = addToList(\"apple\", [\"banana\"]);\nconsole.log(result);","options":"\nA: ['apple', 'banana']\nB: 2\nC: true\nD: undefined\n","answer":"Answer: B","solution":"The .push() method returns the length of the new array! Previously, the array contained one element (the string \"banana\") and had a length of 1. After adding the string \"apple\" to the array, the array contains two elements, and has a length of 2. This gets returned from the addToList function.The push method modifies the original array. If you wanted to return the array from the function rather than the length of the array, you should have returned list after pushing item to it."},{"questionDetail":"75. What's the output?","code":"const box = { x: 10, y: 20 };\n\nObject.freeze(box);\n\nconst shape = box;\nshape.x = 100;\n\nconsole.log(shape);","options":"\nA: { x: 100, y: 20 }\nB: { x: 10, y: 20 }\nC: { x: 100 }\nD: ReferenceError\n","answer":"Answer: B","solution":"Object.freeze makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).When we create the variable shape and set it equal to the frozen object box, shape also refers to a frozen object. You can check whether an object is frozen by using Object.isFrozen. In this case, Object.isFrozen(shape) returns true, since the variable shape has a reference to a frozen object.Since shape is frozen, and since the value of x is not an object, we cannot modify the property x. x is still equal to 10, and { x: 10, y: 20 } gets logged."},{"questionDetail":"76. What's the output?","code":"const { name: myName } = { name: \"Lydia\" };\n\nconsole.log(name);","options":"\nA: \"Lydia\"\nB: \"myName\"\nC: undefined\nD: ReferenceError\n","answer":"Answer: D","solution":"When we unpack the property name from the object on the right-hand side, we assign its value \"Lydia\" to a variable with the name myName.With { name: myName }, we tell JavaScript that we want to create a new variable called myName with the value of the name property on the right-hand side.Since we try to log name, a variable that is not defined, a ReferenceError gets thrown."},{"questionDetail":"77. Is this a pure function?","code":"function sum(a, b) {\n  return a + b;\n}","options":"\nA: Yes\nB: No\n","answer":"Answer: A","solution":"A pure function is a function that always returns the same result, if the same arguments are passed.The sum function always returns the same result. If we pass 1 and 2, it will always return 3 without side effects. If we pass 5 and 10, it will always return 15, and so on. This is the definition of a pure function."},{"questionDetail":"78. What is the output?","code":"const add = () => {\n  const cache = {};\n  return num => {\n    if (num in cache) {\n      return `From cache! ${cache[num]}`;\n    } else {\n      const result = num + 10;\n      cache[num] = result;\n      return `Calculated! ${result}`;\n    }\n  };\n};\n\nconst addFunction = add();\nconsole.log(addFunction(10));\nconsole.log(addFunction(10));\nconsole.log(addFunction(5 * 2));","options":"\nA: Calculated! 20 Calculated! 20 Calculated! 20\nB: Calculated! 20 From cache! 20 Calculated! 20\nC: Calculated! 20 From cache! 20 From cache! 20\nD: Calculated! 20 From cache! 20 Error\n","answer":"Answer: C","solution":"The add function is a memoized function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a cache object that stores the previously returned values.If we call the addFunction function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the caches value will be returned, which saves on execution time. Else, if it's not cached, it will calculate the value and store it afterwards.We call the addFunction function three times with the same value: on the first invocation, the value of the function when num is equal to 10 isn't cached yet. The condition of the if-statement num in cache returns false, and the else block gets executed: Calculated! 20 gets logged, and the value of the result gets added to the cache object. cache now looks like { 10: 20 }.The second time, the cache object contains the value that gets returned for 10. The condition of the if-statement num in cache returns true, and 'From cache! 20' gets logged.The third time, we pass 5 * 2 to the function which gets evaluated to 10. The cache object contains the value that gets returned for 10. The condition of the if-statement num in cache returns true, and 'From cache! 20' gets logged."},{"questionDetail":"79. What is the output?","code":"const myLifeSummedUp = [\"☕\", \"💻\", \"🍷\", \"🍫\"]\n\nfor (let item in myLifeSummedUp) {\n  console.log(item)\n}\n\nfor (let item of myLifeSummedUp) {\n  console.log(item)\n}","options":"\nA: 0 1 2 3 and \"☕\"  \"💻\" \"🍷\" \"🍫\"\nB: \"☕\"  \"💻\" \"🍷\" \"🍫\" and \"☕\"  \"💻\" \"🍷\" \"🍫\"\nC: \"☕\"  \"💻\" \"🍷\" \"🍫\" and 0 1 2 3\nD:  0 1 2 3 and {0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}\n","answer":"Answer: A","solution":"With a for-in loop, we can iterate over enumerable properties. In an array, the enumerable properties are the \"keys\" of array elements, which are actually their indexes. You could see an array as:{0: \"☕\", 1: \"💻\", 2: \"🍷\", 3: \"🍫\"}Where the keys are the enumerable properties. 0 1 2 3 get logged.With a for-of loop, we can iterate over iterables. An array is an iterable. When we iterate over the array, the variable \"item\" is equal to the element it's currently iterating over, \"☕\"  \"💻\" \"🍷\" \"🍫\" get logged."},{"questionDetail":"80. What is the output?","code":"const list = [1 + 2, 1 * 2, 1 / 2]\nconsole.log(list)","options":"\nA: [\"1 + 2\", \"1 * 2\", \"1 / 2\"]\nB: [\"12\", 2, 0.5]\nC: [3, 2, 0.5]\nD:  [1, 1, 1]\n","answer":"Answer: C","solution":"Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.The element will be equal to the returned value.  1 + 2 returns 3, 1 * 2 returns 2, and 1 / 2 returns 0.5."},{"questionDetail":"81. What is the output?","code":"function sayHi(name) {\n  return `Hi there, ${name}`\n}\n\nconsole.log(sayHi())","options":"\nA: Hi there, \nB: Hi there, undefined\nC: Hi there, null\nD:  ReferenceError\n","answer":"Answer: B","solution":"By default, arguments have the value of undefined, unless a value has been passed to the function. In this case, we didn't pass a value for the name argument. name is equal to undefined which gets logged.In ES6, we can overwrite this default undefined value with default parameters. For example:function sayHi(name = \"Lydia\") { ... }In this case, if we didn't pass a value or if we passed undefined, name would always be equal to the string Lydia"},{"questionDetail":"82. What is the output?","code":"var status = \"😎\"\n\nsetTimeout(() => {\n  const status = \"😍\"\n\n  const data = {\n    status: \"🥑\",\n    getStatus() {\n      return this.status\n    }\n  }\n\n  console.log(data.getStatus())\n  console.log(data.getStatus.call(this))\n}, 0)","options":"\nA: \"🥑\" and \"😍\"\nB: \"🥑\" and \"😎\"\nC: \"😍\" and \"😎\"\nD: \"😎\" and \"😎\"\n","answer":"Answer: B","solution":"The value of the this keyword is dependent on where you use it. In a method, like the getStatus method, the this keyword refers to the object that the method belongs to. The method belongs to the data object, so this refers to the data object. When we log this.status, the status property on the data object gets logged, which is \"🥑\".With the call method, we can change the object to which the this keyword refers. In functions, the this keyword refers to the the object that the function belongs to. We declared the setTimeout function on the global object, so within the setTimeout function, the this keyword refers to the global object. On the global object, there is a variable called status with the value of \"😎\". When logging this.status, \"😎\" gets logged."},{"questionDetail":"83. What is the output?","code":"const person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nlet city = person.city\ncity = \"Amsterdam\"\n\nconsole.log(person)","options":"\nA: { name: \"Lydia\", age: 21 }\nB: { name: \"Lydia\", age: 21, city: \"Amsterdam\" }\nC: { name: \"Lydia\", age: 21, city: undefined }\nD: \"Amsterdam\"\n","answer":"Answer: A","solution":"We set the variable city equal to the value of the property called city on the person object. There is no property on this object called city, so the variable city has the value of undefined.Note that we are not referencing the person object itself! We simply set the variable city equal to the current value of the city property on the person object.Then, we set city equal to the string \"Amsterdam\". This doesn't change the person object: there is no reference to that object.When logging the person object, the unmodified object gets returned."},{"questionDetail":"84. What is the output?","code":"function checkAge(age) {\n  if (age < 18) {\n    const message = \"Sorry, you're too young.\"\n  } else {\n    const message = \"Yay! You're old enough!\"\n  }\n\n  return message\n}\n\nconsole.log(checkAge(21))","options":"\nA: \"Sorry, you're too young.\"\nB: \"Yay! You're old enough!\"\nC: ReferenceError\nD: undefined\n","answer":"Answer: C","solution":"Variables with the const and let keyword are block-scoped. A block is anything between curly brackets ({ }). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown."},{"questionDetail":"85. What kind of information would get logged?","code":"fetch('https://www.website.com/api/user/1')\n  .then(res => res.json())\n  .then(res => console.log(res))","options":"\nA: The result of the fetch method.\nB: The result of the second invocation of the fetch method.\nC: The result of the callback in the previous .then().\nD: It would always be undefined.\n","answer":"Answer: C","solution":"The value of res in the second .then is equal to the returned value of the previous .then. You can keep chaining .thens like this, where the value is passed to the next handler."},{"questionDetail":"86. Which option is a way to set hasName equal to true, provided you cannot pass true as an argument?","code":"function getName(name) {\n  const hasName = //\n}","options":"\nA: !!name\nB: name\nC: new Boolean(name)\nD: name.length\n","answer":"Answer: A","solution":"With !!name, we determine whether the value of name is truthy or falsy. If name is truthy, which we want to test for, !name returns false. !false (which is what !!name practically is) returns true.By setting hasName equal to name, you set hasName equal to whatever value you passed to the getName function, not the boolean value true.new Boolean(true) returns an object wrapper, not the boolean value itself.name.length returns the length of the passed argument, not whether it's true."},{"questionDetail":"87. What's the output?","code":"console.log(\"I want pizza\"[0])","options":"\nA: \"\"\"\nB: \"I\"\nC: SyntaxError\nD: undefined\n","answer":"Answer: B","solution":"In order to get an character on a specific index in a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case we want to get the element which index is 0, the character \"I', which gets logged.Note that this method is not supported in IE7 and below. In that case, use .charAt()"},{"questionDetail":"88. What's the output?","code":"function sum(num1, num2 = num1) {\n  console.log(num1 + num2)\n}\n\nsum(10)","options":"\nA: NaN\nB: 20\nC: ReferenceError\nD: undefined\n","answer":"Answer: B","solution":"You can set a default parameter's value equal to another parameter of the function, as long as they've been defined before the default parameter. We pass the value 10 to the sum function. If the sum function only receives 1 argument, it means that the value for num2 is not passed, and the value of num1 is equal to the passed value 10 in this case. The default value of num2 is the value of num1, which is 10.  num1 + num2 returns 20.If you're trying to set a default parameter's value equal to a parameter which is defined after (to the right), the parameter's value hasn't been initialized yet, which will throw an error."},{"questionDetail":"89. What's the output?","code":"// module.js \nexport default () => \"Hello world\"\nexport const name = \"Lydia\"\n\n// index.js \nimport * as data from \"./module\"\n\nconsole.log(data)","options":"\nA: { default: function default(), name: \"Lydia\" }\nB: { default: function default() }\nC: { default: \"Hello world\", name: \"Lydia\" }\nD: Global object of module.js\n","answer":"Answer: A","solution":"With the import * as name syntax, we import all exports from the module.js file into the index.js file as a new object called data is created. In the module.js file, there are two exports: the default export, and a named export. The default export is a function which returns the string \"Hello World\", and the named export is a variable called name which has the value of the string \"Lydia\".The data object has a default property for the default export, other properties have the names of the named exports and their corresponding values."},{"questionDetail":"90. What's the output?","code":"class Person {\n  constructor(name) {\n    this.name = name\n  }\n}\n\nconst member = new Person(\"John\")\nconsole.log(typeof member)","options":"\nA: \"class\"\nB: \"function\"\nC: \"object\"\nD: \"string\"\n","answer":"Answer: C","solution":"Classes are syntactical sugar for function constructors. The equivalent of the Person class as a function constructor would be:function Person() {\n  this.name = name\n}Calling a function constructor with new results in the creation of an instance of Person, typeof keyword returns \"object\" for an instance. typeof member returns \"object\"."},{"questionDetail":"91. What's the output?","code":"let newList = [1, 2, 3].push(4)\n\nconsole.log(newList.push(5))","options":"\nA: [1, 2, 3, 4, 5]\nB: [1, 2, 3, 5]\nC: [1, 2, 3, 4]\nD: Error\n","answer":"Answer: D","solution":"The .push method returns the new length of the array, not the array itself! By setting newList equal to [1, 2, 3].push(4), we set newList equal to the new length of the array: 4.Then, we try to use the .push method on newList. Since newList is the numerical value 4, we cannot use the .push method: a TypeError is thrown."},{"questionDetail":"92. What's the output?","code":"function giveLydiaPizza() {\n  return \"Here is pizza!\"\n}\n\nconst giveLydiaChocolate = () => \"Here's chocolate... now go hit the gym already.\"\n\nconsole.log(giveLydiaPizza.prototype)\nconsole.log(giveLydiaChocolate.prototype)","options":"\nA: { constructor: ...} { constructor: ...}\nB: {} { constructor: ...}\nC: { constructor: ...} {}\nD: { constructor: ...} undefined\n","answer":"Answer: D","solution":"Regular functions, such as the giveLydiaPizza function, have a prototype property, which is an object (prototype object) with a constructor property. Arrow functions however, such as the giveLydiaChocolate function, do not have this prototype property. undefined gets returned when trying to access the prototype property using giveLydiaChocolate.prototype."},{"questionDetail":"93. What's the output?","code":"const person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nfor (const [x, y] of Object.entries(person)) {\n  console.log(x, y)\n}","options":"\nA: name Lydia and age 21\nB: [\"name\", \"Lydia\"] and [\"age\", 21]\nC: [\"name\", \"age\"] and undefined\nD: Error\n","answer":"Answer: A","solution":"Object.entries(person) returns an array of nested arrays, containing the keys and objects:[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]Using the for-of loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using const [x, y]. x is equal to the first element in the subarray, y is equal to the second element in the subarray.The first subarray is [ \"name\", \"Lydia\" ], with x equal to \"name\", and y equal to \"Lydia\", which get logged.\nThe second subarray is [ \"age\", 21 ], with x equal to \"age\", and y equal to 21, which get logged."},{"questionDetail":"94. What's the output?","code":"function getItems(fruitList, ...args, favoriteFruit) {\n  return [...fruitList, ...args, favoriteFruit]\n}\n\ngetItems([\"banana\", \"apple\"], \"pear\", \"orange\")","options":"\nA: [\"banana\", \"apple\", \"pear\", \"orange\"]\nB: [[\"banana\", \"apple\"], \"pear\", \"orange\"]\nC: [\"banana\", \"apple\", [\"pear\"], \"orange\"]\nD: SyntaxError\n","answer":"Answer: D","solution":"...args is a rest parameter. The rest parameter's value is an array containing all remaining arguments, and can only be the last parameter! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.function getItems(fruitList, favoriteFruit, ...args) {\n  return [...fruitList, ...args, favoriteFruit]\n}\n\ngetItems([\"banana\", \"apple\"], \"pear\", \"orange\")The above example works. This returns the array [ 'banana', 'apple', 'orange', 'pear' ]"},{"questionDetail":"95. What's the output?","code":"function nums(a, b) {\n  if\n  (a > b)\n  console.log('a is bigger')\n  else \n  console.log('b is bigger')\n  return \n  a + b\n}\n\nconsole.log(nums(4, 2))\nconsole.log(nums(1, 2))","options":"\nA: a is bigger, 6 and b is bigger, 3\nB: a is bigger, undefined and b is bigger, undefined\nC: undefined and undefined\nD: SyntaxError\n","answer":"Answer: B","solution":"In JavaScript, we don't have to write the semicolon (;) explicitly, however the JavaScript engine still adds them after statements. This is called Automatic Semicolon Insertion. A statement can for example be variables, or keywords like throw, return, break, etc.Here, we wrote a return statement, and another value a + b on a new line. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after return. You could see this as:  return;\n  a + bThis means that a + b is never reached, since a function stops running after the return keyword. If no value gets returned, like here, the function returns undefined. Note that there is no automatic insertion after if/else statements!"},{"questionDetail":"96. What's the output?","code":"class Person {\n  constructor() {\n    this.name = \"Lydia\"\n  }\n}\n\nPerson = class AnotherPerson {\n  constructor() {\n    this.name = \"Sarah\"\n  }\n}\n\nconst member = new Person()\nconsole.log(member.name)","options":"\nA: \"Lydia\"\nB: \"Sarah\"\nC: Error: cannot redeclare Person\nD: SyntaxError\n","answer":"Answer: B","solution":"We can set classes equal to other classes/function constructors. In this case, we set Person equal to AnotherPerson. The name on this constructor is Sarah, so the name property on the new Person instance member is \"Sarah\"."},{"questionDetail":"97. What's the output?","code":"const info = {\n  [Symbol('a')]: 'b'\n}\n\nconsole.log(info)\nconsole.log(Object.keys(info))","options":"\nA: {Symbol('a'): 'b'} and [\"{Symbol('a')\"]\nB: {} and []\nC: { a: \"b\" } and [\"a\"]\nD: {Symbol('a'): 'b'} and []\n","answer":"Answer: D","solution":"A Symbol is not enumerable. The Object.keys method returns all enumerable key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also \"hide\" properties on objects this way (although not entirely. You can still access symbols using the Object.getOwnPropertySymbols() method)."},{"questionDetail":"98. What's the output?","code":"const getList = ([x, ...y]) => [x, y]\nconst getUser = user => { name: user.name, age: user.age }\n\nconst list = [1, 2, 3, 4]\nconst user = { name: \"Lydia\", age: 21 }\n\nconsole.log(getList(list))\nconsole.log(getUser(user))","options":"\nA: [1, [2, 3, 4]] and undefined\nB: [1, [2, 3, 4]] and { name: \"Lydia\", age: 21 }\nC: [1, 2, 3, 4] and { name: \"Lydia\", age: 21 }\nD: Error and { name: \"Lydia\", age: 21 }\n","answer":"Answer: A","solution":"The getList function receives an array as its argument. Between the parentheses of the getList function, we destructure this array right away. You could see this as:[x, ...y] = [1, 2, 3, 4]With the rest parameter ...y, we put all \"remaining\" arguments in an array. The remaining arguments are 2, 3 and 4 in this case. The value of y is an array, containing all the rest parameters. The value of x is equal to 1 in this case, so when we log [x, y], [1, [2, 3, 4]] gets logged.The getUser function receives an object. With arrow functions, we don't have to write curly brackets if we just return one value. However, if you want to return an object from an arrow function, you have to write it between parentheses, otherwise no value gets returned! The following function would have returned an object:const getUser = user => ({ name: user.name, age: user.age })Since no value gets returned in this case, the function returns undefined."},{"questionDetail":"99. What's the output?","code":"const name = \"Lydia\"\n\nconsole.log(name())","options":"\nA: SyntaxError\nB: ReferenceError\nC: TypeError\nD: undefined\n","answer":"Answer: C","solution":"The variable name holds the value of a string, which is not a function, thus cannot invoke.TypeErrors get thrown when a value is not of the expected type. JavaScript expected name to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word return as retrun.\nReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access."},{"questionDetail":"100. What's the value of output?","code":"// 🎉✨ This is my 100th question! ✨🎉\n\nconst output = `${[] && 'Im'}possible!\nYou should${'' && `n't`} see a therapist after so much JavaScript lol`","options":"\nA: possible! You should see a therapist after so much JavaScript lol\nB: Impossible! You should see a therapist after so much JavaScript lol\nC: possible! You shouldn't see a therapist after so much JavaScript lol\nD: Impossible! You shouldn't see a therapist after so much JavaScript lol\n","answer":"Answer: B","solution":"[] is a truthy value. With the && operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value [] is a truthy value, so \"Im' gets returned.\"\" is a falsy value. If the left-hand value is falsy, nothing gets returned. n't doesn't get returned."},{"questionDetail":"101. What's the value of output?","code":"const one = (false || {} || null)\nconst two = (null || false || \"\")\nconst three = ([] || 0 || true)\n\nconsole.log(one, two, three)","options":"\nA: false null []\nB: null \"\" true\nC: {} \"\" []\nD: null null true\n","answer":"Answer: C","solution":"With the || operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.(false || {} || null): the empty object {} is a truthy value. This is the first (and only) truthy value, which gets returned. one is equal to {}.(null || false || \"\"): all operands are falsy values. This means that the past operand, \"\" gets returned. two is equal to \"\".([] || 0 || \"\"): the empty array[] is a truthy value. This is the first truthy value, which gets returned. three is equal to []."},{"questionDetail":"102. What's the value of output?","code":"const myPromise = () => Promise.resolve('I have resolved!')\n\nfunction firstFunction() {\n  myPromise().then(res => console.log(res))\n  console.log('second')\n}\n\nasync function secondFunction() {\n  console.log(await myPromise())\n  console.log('second')\n}\n\nfirstFunction()\nsecondFunction()","options":"\nA: I have resolved!, second and I have resolved!, second\nB: second, I have resolved! and second, I have resolved!\nC: I have resolved!, second and second, I have resolved!\nD: second, I have resolved! and I have resolved!, second\n","answer":"Answer: D","solution":"With a promise, we basically say I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value.We can get this value with both .then and the await keyword in an async function. Although we can get a promise's value with both .then and await, they work a bit differently.In the firstFunction, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is console.log('second') in this case. Then, the function resolved with the string I have resolved, which then got logged after it saw that the callstack was empty.With the await keyword in secondFunction, we literally pause the execution of an async function until the value has been resolved before moving to the next line.This means that it waited for the myPromise to resolve with the value I have resolved, and only once that happened, we moved to the next line: second got logged."},{"questionDetail":"103. What's the value of output?","code":"const set = new Set()\n\nset.add(1)\nset.add(\"Lydia\")\nset.add({ name: \"Lydia\" })\n\nfor (let item of set) {\n  console.log(item + 2)\n}","options":"\nA: 3, NaN, NaN\nB: 3, 7, NaN\nC: 3, Lydia2, [object Object]2\nD: \"12\", Lydia2, [object Object]2\n","answer":"Answer: C","solution":"The + operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.The first one is 1, which is a numerical value. 1 + 2 returns the number 3.However, the second one is a string \"Lydia\". \"Lydia\" is a string and 2 is a number: 2 gets coerced into a string. \"Lydia\" and \"2\" get concatenated, which results in the string \"Lydia2\".{ name: \"Lydia\" } is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes \"[object Object]\". \"[object Object]\" concatenated with \"2\" becomes \"[object Object]2\"."},{"questionDetail":"104. What's its value?","code":"Promise.resolve(5)","options":"\nA: 5\nB: Promise {<pending>: 5}\nC: Promise {<resolved>: 5}\nD: Error\n","answer":"Answer: C","solution":"We can pass any type of value we want to Promise.resolve, either a promise or a non-promise. The method itself returns a promise with the resolved value. If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise.In this case, we just passed the numerical value 5. It returns a resolved promise with the value 5."},{"questionDetail":"105. What's its value?","code":"function compareMembers(person1, person2 = person) {\n  if (person1 !== person2) {\n    console.log(\"Not the same!\")\n  } else {\n    console.log(\"They are the same!\")\n  }\n}\n\nconst person = { name: \"Lydia\" }\n\ncompareMembers(person)","options":"\nA: Not the same!\nB: They are the same!\nC: ReferenceError\nD: SyntaxError\n","answer":"Answer: B","solution":"Objects are passed by reference. When we check objects for strict equality (===), we're comparing their references.We set the default value for person2 equal to the person object, and passed the person object as the value for person1.This means that both values have a reference to the same spot in memory, thus they are equal.The code block in the else statement gets run, and They are the same! gets logged."},{"questionDetail":"106. What's its value?","code":"const colorConfig = {\n  red: true,\n  blue: false,\n  green: true,\n  black: true,\n  yellow: false,\n}\n\nconst colors = [\"pink\", \"red\", \"blue\"]\n\nconsole.log(colorConfig.colors[1])","options":"\nA: true\nB: false\nC: undefined\nD: TypeError\n","answer":"Answer: D","solution":"In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (colorConfig.colors) instead of bracket notation (colorConfig[\"colors\"]).With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called colors on the colorConfig object. There is no property called colors, so this returns undefined. Then, we try to access the value of the first element by using [1]. We cannot do this on a value that's undefined, so it throws a TypeError: Cannot read property '1' of undefined.JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket [ and keeps going until it finds the closing bracket ]. Only then, it will evaluate the statement. If we would've used colorConfig[colors[1]], it would have returned the value of the red property on the colorConfig object."},{"questionDetail":"107. What's its value?","code":"console.log('❤️' === '❤️')","options":"\nA: true\nB: false\n","answer":"Answer: A","solution":"Under the hood, emojis are unicodes. The unicodes for the heart emoji is \"U+2764 U+FE0F\". These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true."},{"questionDetail":"108. Which of these methods modifies the original array?","code":"const emojis = ['✨', '🥑', '😍']\n\nemojis.map(x => x + '✨')\nemojis.filter(x => x !== '🥑')\nemojis.find(x => x !== '🥑')\nemojis.reduce((acc, cur) => acc + '✨')\nemojis.slice(1, 2, '✨') \nemojis.splice(1, 2, '✨')","options":"\nA: All of them\nB: map reduce slice splice\nC: map slice splice\nD: splice\n","answer":"Answer: D","solution":"With splice method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed '🥑' and '😍') and added the ✨ emoji instead.map, filter and slice return a new array, find returns an element, and reduce returns a reduced value."},{"questionDetail":"109. What's the output?","code":"const food = ['🍕', '🍫', '🥑', '🍔']\nconst info = { favoriteFood: food[0] }\n\ninfo.favoriteFood = '🍝'\n\nconsole.log(food)","options":"\nA: ['🍕', '🍫', '🥑', '🍔']\nB: ['🍝', '🍫', '🥑', '🍔']\nC: ['🍝', '🍕', '🍫', '🥑', '🍔']\nD: ReferenceError\n","answer":"Answer: A","solution":"We set the value of the favoriteFood property on the info object equal to the string with the pizza emoji, '🍕'. A string is a primitive data type. In JavaScript, primitive data types act by referenceIn JavaScript, primitive data types (everything that's not an object) interact by value. In this case, we set the value of the favoriteFood property on the info object equal to the value of the first element in the food array, the string with the pizza emoji in this case ('🍕'). A string is a primitive data type, and interact by value (see my blogpost if you're interested in learning more)Then, we change the value of the favoriteFood property on the info object. The food array hasn't changed, since the value of favoriteFood was merely a copy of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on food[0]. When we log food, it's still the original array, ['🍕', '🍫', '🥑', '🍔']."},{"questionDetail":"110. What does this method do?","code":"JSON.parse()","options":"\nA: Parses JSON to a JavaScript value\nB: Parses a JavaScript object to JSON\nC: Parses any JavaScript value to JSON\nD: Parses JSON to a JavaScript object only\n","answer":"Answer: A","solution":"With the JSON.parse() method, we can parse JSON string to a JavaScript value.// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonNumber = JSON.stringify(4) // '4'\nJSON.parse(jsonNumber) // 4\n\n// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify([1, 2, 3]) // '[1, 2, 3]'\nJSON.parse(jsonArray) // [1, 2, 3]\n\n// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify({ name: \"Lydia\" }) // '{\"name\":\"Lydia\"}'\nJSON.parse(jsonArray) // { name: 'Lydia' }"},{"questionDetail":"111. What's the output?","code":"let name = 'Lydia'\n\nfunction getName() {\n  console.log(name)\n  let name = 'Sarah'\n}\n\ngetName()","options":"\nA: Lydia\nB: Sarah\nC: undefined\nD: ReferenceError\n","answer":"Answer: D","solution":"Each function has its own execution context (or scope). The getName function first looks within its own context (scope) to see if it contains the variable name we're trying to access. In this case, the getName function contains its own name variable: we declare the variable name with the let keyword, and with the value of 'Sarah'.Variables with the let keyword (and const) are hoisted, but unlike var, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a ReferenceError.If we wouldn't have declared the name variable within the getName function, the javascript engine would've looked down the scope chain. The outer scope has a variable called name with the value of Lydia. In that case, it would've logged Lydia.let name = 'Lydia'\n\nfunction getName() {\n  console.log(name)\n}\n\ngetName() // Lydia"},{"questionDetail":"112. What's the output?","code":"function* generatorOne() {\n  yield ['a', 'b', 'c'];\n}\n\nfunction* generatorTwo() {\n  yield* ['a', 'b', 'c'];\n}\n\nconst one = generatorOne()\nconst two = generatorTwo()\n\nconsole.log(one.next().value)\nconsole.log(two.next().value)","options":"\nA: a and a\nB: a and undefined\nC: ['a', 'b', 'c'] and a\nD: a and ['a', 'b', 'c']\n","answer":"Answer: C","solution":"With the yield keyword, we yield values in a generator function. With the yield* keyword, we can yield values from another generator function, or iterable object (for example an array).In generatorOne, we yield the entire array ['a', 'b', 'c'] using the yield keyword. The value of value property on the object returned by the next method on one (one.next().value) is equal to the entire array ['a', 'b', 'c'].console.log(one.next().value) // ['a', 'b', 'c']\nconsole.log(one.next().value) // undefinedIn generatorTwo, we use the yield* keyword. This means that the first yielded value of two, is equal to the first yielded value in the iterator. The iterator is the array ['a', 'b', 'c']. The first yielded value is a, so the first time we call two.next().value, a is returned.console.log(two.next().value) // 'a'\nconsole.log(two.next().value) // 'b'\nconsole.log(two.next().value) // 'c'\nconsole.log(two.next().value) // undefined"},{"questionDetail":"113. What's the output?","code":"console.log(`${(x => x)('I love')} to program`)","options":"\nA: I love to program\nB: undefined to program\nC: ${(x => x)('I love') to program\nD: TypeError\n","answer":"Answer: A","solution":"Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function (x => x)('I love') in this case. We pass the value 'I love' as an argument to the x => x arrow function. x is equal to 'I love', which gets returned. This results in I love to program."},{"questionDetail":"114. What will happen?","code":"let config = {\n  alert: setInterval(() => {\n    console.log('Alert!')\n  }, 1000)\n}\n\nconfig = null","options":"\nA: The setInterval callback won't be invoked\nB: The setInterval callback gets invoked once\nC: The setInterval callback will still be called every second\nD: We never invoked config.alert(), config is null\n","answer":"Answer: C","solution":"Normally when we set objects equal to null, those objects get garbage collected as there is no reference anymore to that object. However, since the callback function within setInterval is an arrow function (thus bound to the config object), the callback function still holds a reference to the config object. As long as there is a reference, the object won't get garbage collected. Since it's not garbage collected, the setInterval callback function will still get invoked every 1000ms (1s)."},{"questionDetail":"115. Which method(s) will return the value 'Hello world!'?","code":"const myMap = new Map()\nconst myFunc = () => 'greeting'\n\nmyMap.set(myFunc, 'Hello world!')\n\n//1\nmyMap.get('greeting')\n//2\nmyMap.get(myFunc)\n//3\nmyMap.get(() => 'greeting')","options":"\nA: 1\nB: 2\nC: 2 and 3\nD: All of them\n","answer":"Answer: B","solution":"When adding a key/value pair using the set method, the key will be the value of the first argument passed to the set function, and the value will be the second argument passed to the set function. The key is the function () => 'greeting' in this case, and the value 'Hello world'. myMap is now { () => 'greeting' => 'Hello world!' }.1 is wrong, since the key is not 'greeting' but () => 'greeting'.\n3 is wrong, since we're creating a new function by passing it as a parameter to the get method. Object interact by reference. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory."},{"questionDetail":"116. What's the output?","code":"const person = {\n  name: \"Lydia\",\n  age: 21\n}\n\nconst changeAge = (x = { ...person }) => x.age += 1\nconst changeAgeAndName = (x = { ...person }) => {\n  x.age += 1\n  x.name = \"Sarah\"\n}\n\nchangeAge(person)\nchangeAgeAndName()\n\nconsole.log(person)","options":"\nA: {name: \"Sarah\", age: 22}\nB: {name: \"Sarah\", age: 23}\nC: {name: \"Lydia\", age: 22}\nD: {name: \"Lydia\", age: 23}\n","answer":"Answer: C","solution":"Both the changeAge and changeAgeAndName functions have a default parameter, namely a newly created object { ...person }. This object has copies of all the key/values in the person object.First, we invoke the changeAge function and pass the person object as its argument. This function increases the value of the age property by 1. person is now { name: \"Lydia\", age: 22 }.Then, we invoke the changeAgeAndName function, however we don't pass a parameter. Instead, the value of x is equal to a new object: { ...person }. Since it's a new object, it doesn't affect the values of the properties on the person object. person is still equal to { name: \"Lydia\", age: 22 }."},{"questionDetail":"117. Which of the following options will return 6?","code":"function sumValues(x, y, z) {\n\treturn x + y + z;\n}","options":"\nA: sumValues([...1, 2, 3])\nB: sumValues([...[1, 2, 3]])\nC: sumValues(...[1, 2, 3])\nD: sumValues([1, 2, 3])\n","answer":"Answer: C","solution":"With the spread operator ..., we can spread iterables to individual elements. The sumValues function receives three arguments: x, y and z. ...[1, 2, 3] will result in 1, 2, 3, which we pass to the sumValues function."},{"questionDetail":"118. What's the output?","code":"let num = 1;\nconst list = [\"🥳\", \"🤠\", \"🥰\", \"🤪\"];\n\nconsole.log(list[(num += 1)]);","options":"\nA: 🤠\nB: 🥰\nC: SyntaxError\nD: ReferenceError\n","answer":"Answer: B","solution":"With the += operand, we're incrementing the value of num by 1. num had the initial value 1, so 1 + 1 is 2. The item on the second index in the list array is 🥰, console.log(list[2]) prints 🥰."},{"questionDetail":"119. What's the output?","code":"const person = {\n\tfirstName: \"Lydia\",\n\tlastName: \"Hallie\",\n\tpet: {\n\t\tname: \"Mara\",\n\t\tbreed: \"Dutch Tulip Hound\"\n\t},\n\tgetFullName() {\n\t\treturn `${this.firstName} ${this.lastName}`;\n\t}\n};\n\nconsole.log(person.pet?.name);\nconsole.log(person.pet?.family?.name);\nconsole.log(person.getFullName?.());\nconsole.log(member.getLastName?.());","options":"\nA: undefined undefined undefined undefined\nB: Mara undefined Lydia Hallie undefined\nC: Mara null Lydia Hallie null\nD: null ReferenceError null ReferenceError\n","answer":"Answer: B","solution":"With the optional chaining operator ?., we no longer have to explicitly check whether the deeper nested values are valid or not. If we're trying to access a property on an undefined or null value (nullish), the expression short-circuits and returns undefined.person.pet?.name: person has a property named pet: person.pet is not nullish. It has a property called name, and returns Mara.\nperson.pet?.family?.name: person has a property named pet: person.pet is not nullish. pet does not have a property called family, person.pet.family is nullish. The expression returns undefined.\nperson.getFullName?.(): person has a property named getFullName: person.getFullName() is not nullish and can get invoked, which returns Lydia Hallie.\nmember.getLastName?.(): member is not defined: member.getLastName() is nullish. The expression returns undefined."},{"questionDetail":"120. What's the output?","code":"const groceries = [\"banana\", \"apple\", \"peanuts\"];\n\nif (groceries.indexOf(\"banana\")) {\n\tconsole.log(\"We have to buy bananas!\");\n} else {\n\tconsole.log(`We don't have to buy bananas!`);\n}","options":"\nA: We have to buy bananas!\nB: We don't have to buy bananas\nC: undefined\nD: 1\n","answer":"Answer: B","solution":"We passed the condition groceries.indexOf(\"banana\") to the if-statement. groceries.indexOf(\"banana\") returns 0, which is a falsy value. Since the condition in the if-statement is falsy, the code in the else block runs, and We don't have to buy bananas! gets logged."},{"questionDetail":"121. What's the output?","code":"const config = {\n\tlanguages: [],\n\tset language(lang) {\n\t\treturn this.languages.push(lang);\n\t}\n};\n\nconsole.log(config.language);","options":"\nA: function language(lang) { this.languages.push(lang }\nB: 0\nC: []\nD: undefined\n","answer":"Answer: D","solution":"The language method is a setter. Setters don't hold an actual value, their purpose is to modify properties. When calling a setter method, undefined gets returned."},{"questionDetail":"122. What's the output?","code":"const name = \"Lydia Hallie\";\n\nconsole.log(!typeof name === \"object\");\nconsole.log(!typeof name === \"string\");","options":"\nA: false true\nB: true false\nC: false false\nD: true true\n","answer":"Answer: C","solution":"typeof name returns \"string\". The string \"string\" is a truthy value, so !typeof name returns the boolean value false. false === \"object\" and false === \"string\" both returnfalse.(If we wanted to check whether the type was (un)equal to a certain type, we should've written !== instead of !typeof)"},{"questionDetail":"123. What's the output?","code":"const add = x => y => z => {\n\tconsole.log(x, y, z);\n\treturn x + y + z;\n};\n\nadd(4)(5)(6);","options":"\nA: 4 5 6\nB: 6 5 4\nC: 4 function function\nD: undefined undefined 6\n","answer":"Answer: A","solution":"The add function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument x with the value of 4. We invoke the second function, which receives an argument y with the value 5. Then we invoke the third function, which receives an argument z with the value 6. When we're trying to access the value x, y and z within the last arrow function, the JS engine goes up the scope chain in order to find the values for x and y accordingly. This returns 4 5 6."},{"questionDetail":"124. What's the output?","code":"async function* range(start, end) {\n\tfor (let i = start; i <= end; i++) {\n\t\tyield Promise.resolve(i);\n\t}\n}\n\n(async () => {\n\tconst gen = range(1, 3);\n\tfor await (const item of gen) {\n\t\tconsole.log(item);\n\t}\n})();","options":"\nA: Promise {1} Promise {2} Promise {3}\nB: Promise {<pending>} Promise {<pending>} Promise {<pending>}\nC: 1 2 3\nD: undefined undefined undefined\n","answer":"Answer: C","solution":"The generator function range returns an async object with promises for each item in the range we pass: Promise{1}, Promise{2}, Promise{3}. We set the variable gen equal to the async object, after which we loop over it using a for await ... of loop. We set the variable item equal to the returned Promise values: first Promise{1}, then Promise{2}, then Promise{3}. Since we're awaiting the value of item, the resolved promsie, the resolved values of the promises get returned: 1, 2, then 3."},{"questionDetail":"125. What's the output?","code":"const myFunc = ({ x, y, z }) => {\n\tconsole.log(x, y, z);\n};\n\nmyFunc(1, 2, 3);","options":"\nA: 1 2 3\nB: {1: 1} {2: 2} {3: 3}\nC: { 1: undefined } undefined undefined\nD: undefined undefined undefined\n","answer":"Answer: D","solution":"myFunc expects an object with properties x, y and z as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties x, y and z ({x: 1, y: 2, z: 3}), x, y and z have their default value of undefined."},{"questionDetail":"126. What's the output?","code":"function getFine(speed, amount) {\n  const formattedSpeed = new Intl.NumberFormat({\n    'en-US',\n    { style: 'unit', unit: 'mile-per-hour' }\n  }).format(speed)\n\n  const formattedAmount = new Intl.NumberFormat({\n    'en-US',\n    { style: 'currency', currency: 'USD' }\n  }).format(amount)\n\n  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`\n}\n\nconsole.log(getFine(130, 300))","options":"\nA: The driver drove 130 and has to pay 300\nB: The driver drove 130 mph and has to pay $300.00\nC: The driver drove undefined and has to pay undefined\nD: The driver drove 130.00 and has to pay 300.00\n","answer":"Answer: B","solution":"With the Intl.NumberFormat method, we can format numeric values to any locale. We format the numeric value 130 to the en-US locale as a unit in mile-per-hour, which results in 130 mph. The numeric value 300 to the en-US locale as a currentcy in USD results in $300.00."},{"questionDetail":"127. What's the output?","code":"const spookyItems = [\"👻\", \"🎃\", \"🕸\"];\n({ item: spookyItems[3] } = { item: \"💀\" });\n\nconsole.log(spookyItems);","options":"\nA: [\"👻\", \"🎃\", \"🕸\"]\nB: [\"👻\", \"🎃\", \"🕸\", \"💀\"]\nC: [\"👻\", \"🎃\", \"🕸\", { item: \"💀\" }]\nD: [\"👻\", \"🎃\", \"🕸\", \"[object Object]\"]\n","answer":"Answer: B","solution":"By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we're assigning the value \"💀\" to spookyItems[3]. This means that we're modifying the spookyItems array, we're adding the \"💀\" to it. When logging spookyItems, [\"👻\", \"🎃\", \"🕸\", \"💀\"] gets logged."},{"questionDetail":"128. What's the output?","code":"const name = \"Lydia Hallie\";\nconst age = 21;\n\nconsole.log(Number.isNaN(name));\nconsole.log(Number.isNaN(age));\n\nconsole.log(isNaN(name));\nconsole.log(isNaN(age));","options":"\nA: true false true false\nB: true false false false\nC: false false true false\nD: false true false true\n","answer":"Answer: C","solution":"With the Number.isNaN method, you can check if the value you pass is a numeric value and equal to NaN. name is not a numeric value, so Number.isNaN(name) returns false. age is a numeric value, but is not equal to NaN, so Number.isNaN(age) returns false.With the isNaN method, you can check if the value you pass is not a number. name is not a number, so isNaN(name) returns true. age is a number, so isNaN(age) returns false."},{"questionDetail":"129. What's the output?","code":"const randomValue = 21;\n\nfunction getInfo() {\n\tconsole.log(typeof randomValue);\n\tconst randomValue = \"Lydia Hallie\";\n}\n\ngetInfo();","options":"\nA: \"number\"\nB: \"string\"\nC: undefined\nD: ReferenceError\n","answer":"Answer: D","solution":"Variables declared with the const keyword are not referencable before their initialization: this is called the temporal dead zone. In the getInfo function, the variable randomValue is scoped in the functional scope of getInfo. On the line where we want to log the value of typeof randomValue, the variable randomValue isn't initialized yet: a ReferenceError gets thrown! The engine didn't go down the scope chain since we declared the variable randomValue in the getInfo function."},{"questionDetail":"130. What's the output?","code":"const myPromise = Promise.resolve(\"Woah some cool data\");\n\n(async () => {\n\ttry {\n\t\tconsole.log(await myPromise);\n\t} catch {\n\t\tthrow new Error(`Oops didn't work`);\n\t} finally {\n\t\tconsole.log(\"Oh finally!\");\n\t}\n})();","options":"\nA: Woah some cool data\nB: Oh finally!\nC: Woah some cool data Oh finally!\nD: Oops didn't work Oh finally!\n","answer":"Answer: C","solution":"In the try block, we're logging the awaited value of the myPromise variable: \"Woah some cool data\". Since no errors were thrown in the try block, the code in the catch block doesn't run. The code in the finally block always runs, \"Oh finally!\" gets logged."},{"questionDetail":"131. What's the output?","code":"const emojis = [\"🥑\", [\"✨\", \"✨\", [\"🍕\", \"🍕\"]]];\n\nconsole.log(emojis.flat(1));","options":"\nA: ['🥑', ['✨', '✨', ['🍕', '🍕']]]\nB: ['🥑', '✨', '✨', ['🍕', '🍕']]\nC: ['🥑', ['✨', '✨', '🍕', '🍕']]\nD: ['🥑', '✨', '✨', '🍕', '🍕']\n","answer":"Answer: B","solution":"With the flat method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value 1 (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. ['🥑'] and ['✨', '✨', ['🍕', '🍕']] in this case. Concatenating these two arrays results in ['🥑', '✨', '✨', ['🍕', '🍕']]."},{"questionDetail":"132. What's the output?","code":"class Counter {\n\tconstructor() {\n\t\tthis.count = 0;\n\t}\n\n\tincrement() {\n\t\tthis.count++;\n\t}\n}\n\nconst counterOne = new Counter();\ncounterOne.increment();\ncounterOne.increment();\n\nconst counterTwo = counterOne;\ncounterTwo.increment();\n\nconsole.log(counterOne.count);","options":"\nA: 0\nB: 1\nC: 2\nD: 3\n","answer":"Answer: D","solution":"counterOne is an instance of the Counter class. The counter class contains a count property on its constructor, and an increment method. First, we invoked the increment method twice by calling counterOne.increment(). Currently, counterOne.count is 2.Then, we create a new variable counterTwo, and set it equal to counterOne. Since objects interact by reference, we're just creating a new reference to the same spot in memory that counterOne points to. Since it has the same spot in memory, any changes made to the object that counterTwo has a reference to, also apply to counterOne. Currently, counterTwo.count is 2.We invoke the counterTwo.increment(), which sets the count to 3. Then, we log the count on counterOne, which logs 3."},{"questionDetail":"133. What's the output?","code":"const myPromise = Promise.resolve(Promise.resolve(\"Promise!\"));\n\nfunction funcOne() {\n\tmyPromise.then(res => res).then(res => console.log(res));\n\tsetTimeout(() => console.log(\"Timeout!\", 0));\n\tconsole.log(\"Last line!\");\n}\n\nasync function funcTwo() {\n\tconst res = await myPromise;\n\tconsole.log(await res);\n\tsetTimeout(() => console.log(\"Timeout!\", 0));\n\tconsole.log(\"Last line!\");\n}\n\nfuncOne();\nfuncTwo();","options":"\nA: Promise! Last line! Promise! Last line! Last line! Promise!\nB: Last line! Timeout! Promise! Last line! Timeout! Promise!\nC: Promise! Last line! Last line! Promise! Timeout! Timeout!\nD: Last line! Promise! Promise! Last line! Timeout! Timeout!\n","answer":"Answer: D","solution":"First, we invoke funcOne. On the first line of funcOne, we call the myPromise promise, which is an asynchronous operation. While the engine is busy completing the promise, it keeps on running the function funcOne. The next line is the asynchronous setTimeout function, from which the callback is sent to the Web API. (see my article on the event loop here.)Both the promise and the timeout are asynchronous operations, the function keeps on running while it's busy completing the promise and handling the setTimeout callback. This means that Last line! gets logged first, since this is not an asynchonous operation. This is the last line of funcOne, the promise resolved, and Promise! gets logged. However, since we're invoking funcTwo(), the call stack isn't empty, and the callback of the setTimeout function cannot get added to the callstack yet.In funcTwo we're, first awaiting the myPromise promise. With the await keyword, we pause the execution of the function until the promise has resolved (or rejected). Then, we log the awaited value of res (since the promise itself returns a promise). This logs Promise!.The next line is the asynchronous setTimeout function, from which the callback is sent to the Web API.We get to the last line of funcTwo, which logs Last line! to the console. Now, since funcTwo popped off the call stack, the call stack is empty. The callbacks waiting in the queue (() => console.log(\"Timeout!\") from funcOne, and () => console.log(\"Timeout!\") from funcTwo) get added to the call stack one by one. The first callback logs Timeout!, and gets popped off the stack. Then, the second callback logs Timeout!, and gets popped off the stack. This logs Last line! Promise! Promise! Last line! Timeout! Timeout!"},{"questionDetail":"134. How can we invoke sum in index.js from sum.js?","code":"// sum.js\nexport default function sum(x) {\n\treturn x + x;\n}\n\n// index.js\nimport * as sum from \"./sum\";","options":"\nA: sum(4)\nB: sum.sum(4)\nC: sum.default(4)\nD: Default aren't imported with *, only named exports\n","answer":"Answer: C","solution":"With the asterisk *, we import all exported values from that file, both default and named. If we had the following file:// info.js\nexport const name = \"Lydia\";\nexport const age = 21;\nexport default \"I love JavaScript\";\n\n// index.js\nimport * as info from \"./info\";\nconsole.log(info);The following would get logged:{\n  default: \"I love JavaScript\",\n  name: \"Lydia\",\n  age: 21\n}For the sum example, it means that the imported value sum looks like this:{ default: function sum(x) { return x + x } }We can invoke this function, by calling sum.default"},{"questionDetail":"135. What's the output?","code":"const handler = {\n\tset: () => console.log(\"Added a new property!\"),\n\tget: () => console.log(\"Accessed a property!\")\n};\n\nconst person = new Proxy({}, handler);\n\nperson.name = \"Lydia\";\nperson.name;","options":"\nA: Added a new property!\nB: Accessed a property!\nC: Added a new property! Accessed a property!\nD: Nothing gets logged\n","answer":"Answer: C","solution":"With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In tis case, we pass the handler object which contained to properties: set and get. set gets invoked whenever we set property values, get gets invoked whenever we get (access) property values.The first argument is an empty object {}, which is the value of person. To this object, the custom behavior specified in the handler object gets added. If we add a property to the person object, set will get invoked. If we access a property on the person object, get gets invoked.First, we added a new property name to the proxy object (person.name = \"Lydia\"). set gets invoked, and logs \"Added a new property!\".Then, we access a property value on the proxy object, the get property on the handler object got invoked. \"Accessed a property!\" gets logged."},{"questionDetail":"136. Which of the following will modify the person object?","code":"const person = { name: \"Lydia Hallie\" };\n\nObject.seal(person);","options":"\nA: person.name = \"Evan Bacon\"\nB: person.age = 21\nC: delete person.name\nD: Object.assign(person, { age: 21 })\n","answer":"Answer: A","solution":"With Object.seal we can prevent new properies from being added, or existing properties to be removed.However, you can still modify the value of existing properties."},{"questionDetail":"137. Which of the following will modify the person object?","code":"const person = {\n\tname: \"Lydia Hallie\",\n\taddress: {\n\t\tstreet: \"100 Main St\"\n\t}\n};\n\nObject.freeze(person);","options":"\nA: person.name = \"Evan Bacon\"\nB: delete person.address\nC: person.address.street = \"101 Main St\"\nD: person.pet = { name: \"Mara\" }\n","answer":"Answer: C","solution":"The Object.freeze method freezes an object. No properties can be added, modified, or removed.However, it only shallowly freezes the object, meaning that only direct properties on the object are frozen. If the property is another object, like address in this case, the properties on that object aren't frozen, and can be modified."},{"questionDetail":"138. What's the output?","code":"const add = x => x + x;\n\nfunction myFunc(num = 2, value = add(num)) {\n\tconsole.log(num, value);\n}\n\nmyFunc();\nmyFunc(3);","options":"\nA: 2 4 and 3 6\nB: 2 NaN and 3 NaN\nC: 2 Error and 3 6\nD: 2 4 and 3 Error\n","answer":"Answer: A","solution":"First, we invoked myFunc() without passing any arguments. Since we didn't pass arguments, num and value got their default values: num is 2, and value the returned value of the function add. To the add function, we pass num as an argument, which had the value of 2. add returns 4, which is the value of value.Then, we invoked myFunc(3) and passed the value 3 as the value for the argument num. We didn't pass an argument for value. Since we didn't pass a value for the value argument, it got the default value: the returned value of the add function. To add, we pass num, which has the value of 3. add returns 6, which is the value of value."},{"questionDetail":"139. What's the output?","code":"class Counter {\n  #number = 10\n\n  increment() {\n    this.#number++\n  }\n\n  getNum() {\n    return this.#number\n  }\n}\n\nconst counter = new Counter()\ncounter.increment()\n\nconsole.log(counter.#number)","options":"\nA: 10\nB: 11\nC: undefined\nD: SyntaxError\n","answer":"Answer: D","solution":"In ES2020, we can add private variables in classes by using the #. We cannot access these variables outside of the class. When we try to log counter.#number, a SyntaxError gets thrown: we cannot acccess it outside the Counter class!"},{"questionDetail":"140. What's the output?","code":"const teams = [\n\t{ name: \"Team 1\", members: [\"Paul\", \"Lisa\"] },\n\t{ name: \"Team 2\", members: [\"Laura\", \"Tim\"] }\n];\n\nfunction* getMembers(members) {\n\tfor (let i = 0; i < members.length; i++) {\n\t\tyield members[i];\n\t}\n}\n\nfunction* getTeams(teams) {\n\tfor (let i = 0; i < teams.length; i++) {\n\t\t// ✨ SOMETHING IS MISSING HERE ✨\n\t}\n}\n\nconst obj = getTeams(teams);\nobj.next(); // { value: \"Paul\", done: false }\nobj.next(); // { value: \"Lisa\", done: false }","options":"\nA: yield getMembers(teams[i].members)\nB: yield* getMembers(teams[i].members)\nC: return getMembers(teams[i].members)\nD: return yield getMembers(teams[i].members)\n","answer":"Answer: B","solution":"In order to iterate over the members in each element in the teams array, we need to pass teams[i].members to the getMembers generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use yield*.If we would've written yield, return yield, or return, the entire generator function would've gotten returned the first time we called the next method."},{"questionDetail":"141. What's the output?","code":"const person = {\n\tname: \"Lydia Hallie\",\n\thobbies: [\"coding\"]\n};\n\nfunction addHobby(hobby, hobbies = person.hobbies) {\n\thobbies.push(hobby);\n\treturn hobbies;\n}\n\naddHobby(\"running\", []);\naddHobby(\"dancing\");\naddHobby(\"baking\", person.hobbies);\n\nconsole.log(person.hobbies);","options":"\nA: [\"coding\"]\nB: [\"coding\", \"dancing\"]\nC: [\"coding\", \"dancing\", \"baking\"]\nD: [\"coding\", \"running\", \"dancing\", \"baking\"]\n","answer":"Answer: C","solution":"The addHobby function receives two arguments, hobby and hobbies with the default value of the hobbies array on the person object.First, we invoke the addHobby function, and pass \"running\" as the value for hobby and an empty array as the value for hobbies. Since we pass an empty array as the value for y, \"running\" gets added to this empty array.Then, we invoke the addHobby function, and pass \"dancing\" as the value for hobby. We didn't pass a value for hobbies, so it gets the default value, the hobbies property on the person object. We push the hobby dancing to the person.hobbies array.Last, we invoke the addHobby function, and pass \"bdaking\" as the value for hobby, and the person.hobbies array as the value for hobbies. We push the hobby baking to the person.hobbies array.After pushing dancing and baking, the value of person.hobbies is [\"coding\", \"dancing\", \"baking\"]"},{"questionDetail":"142. What's the output?","code":"class Bird {\n\tconstructor() {\n\t\tconsole.log(\"I'm a bird. 🦢\");\n\t}\n}\n\nclass Flamingo extends Bird {\n\tconstructor() {\n\t\tconsole.log(\"I'm pink. 🌸\");\n\t\tsuper();\n\t}\n}\n\nconst pet = new Flamingo();","options":"\nA: I'm pink. 🌸\nB: I'm pink. 🌸 I'm a bird. 🦢\nC: I'm a bird. 🦢 I'm pink. 🌸\nD: Nothing, we didn't call any method\n","answer":"Answer: B","solution":"We create the variable pet which is an instance of the Flamingo class. When we instantiate this instance, the constructor on Flamingo gets called. First, \"I'm pink. 🌸\" gets logged, after which we call super(). super() calls the constructor of the parent class, Bird. THe constructor in Bird gets called, and logs \"I'm a bird. 🦢\"."},{"questionDetail":"143. Which of the options result(s) in an error?","code":"const emojis = [\"🎄\", \"🎅🏼\", \"🎁\", \"⭐\"];\n\n/* 1 */ emojis.push(\"🦌\");\n/* 2 */ emojis.splice(0, 2);\n/* 3 */ emojis = [...emojis, \"🥂\"];\n/* 4 */ emojis.length = 0;","options":"\nA: 1\nB: 1 and 2\nC: 3 and 4\nD: 3\n","answer":"Answer: D","solution":"The const keyword simply means we cannot redeclare the value of that variable, it's read-only. However, the value itself isn't immutable. The propeties on the emojis array can be modified, for example by pushing new values, splicing them, or setting the length of the array to 0."},{"questionDetail":"144. What do we need to add to the person object to get [\"Lydia Hallie\", 21] as the output of [...person]?","code":"const person = {\n  name: \"Lydia Hallie\",\n  age: 21\n}\n\n[...person] // [\"Lydia Hallie\", 21]","options":"\nA: Nothing, object are iterable by default\nB: *[Symbol.iterator]() { for (let x in this) yield* this[x] }\nC: *[Symbol.iterator]() { yield* Object.values(this) }\nD: *[Symbol.iterator]() { for (let x in this) yield this }\n","answer":"Answer: C","solution":"Objects aren't iterable by default. An iterable is an iterable if the iterator protocol is present. We can add this manually by adding the iterator symbol [Symbol.iterator], which has to return a generator object, for example by making it a generator function *[Symbol.iterator]() {}. This generator function has to yield the Object.values of the person object if we want it to return the array [\"Lydia Hallie\", 21]: yield* Object.values(this)."}]